"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _breachedAccount = _interopRequireDefault(require("./breachedAccount"));

var _pasteAccount = _interopRequireDefault(require("./pasteAccount"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fetches all breaches and all pastes associated with the provided account
 * (email address or username). Note that the remote API does not support
 * querying pastes by username (only email addresses), so in the event the
 * provided account is not a valid email address, only breach data is queried
 * and the "pastes" field of the resulting object will always be null. This is
 * exactly how searching via the current web interface behaves, which this
 * convenience method is designed to mimic.
 *
 * @param {string} account an email address or username
 * @param {Object} [breachOptions] a configuration object pertaining to
 * breach queries
 * @param {string} [breachOptions.domain] a domain by which to filter the
 * results (default: all domains)
 * @param {boolean} [breachOptions.truncate] truncate the results to only
 * include the name of each breach (default: false)
 * @returns {Promise} a Promise which resolves to an object containing a
 * "breaches" key (which can be null or an array of breach objects) and a
 * "pastes" key (which can be null or an array of paste objects), or rejects
 * with an Error
 * @example
 * search('foo')
 *   .then(data => {
 *     if (data.breaches || data.pastes) {
 *       // ...
 *     } else {
 *       // ...
 *     }
 *   })
 *   .catch(err => {
 *     // ...
 *   });
 * @example
 * search('nobody@nowhere.com', { truncate: true })
 *   .then(data => {
 *     if (data.breaches || data.pastes) {
 *       // ...
 *     } else {
 *       // ...
 *     }
 *   })
 *   .catch(err => {
 *     // ...
 *   });
 *
 * @see https://haveibeenpwned.com/
 * @alias module:search
 */
var search = function search(account, breachOptions) {
  if (breachOptions === void 0) {
    breachOptions = {};
  }

  return Promise.all([(0, _breachedAccount.default)(account, breachOptions), // This email regex is garbage but it seems to be what the API uses:
  /^.+@.+$/.test(account) ? (0, _pasteAccount.default)(account) : null]).then(function (_ref) {
    var breaches = _ref[0],
        pastes = _ref[1];
    return {
      breaches: breaches,
      pastes: pastes
    };
  });
};
/**
 * A module for searching all breach and paste data associated with a specific
 * account (email address or username).
 *
 * @module search
 * @example
 * import { search } from 'hibp';
 */


var _default = search;
exports.default = _default;
//# sourceMappingURL=search.js.map
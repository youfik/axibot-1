{"version":3,"sources":["../src/pwnedPassword.js"],"names":["JSSHA","pwnedPasswordRange","pwnedPassword","sha1","update","password","hash","getHash","outputUpper","prefix","slice","suffix","then","arr","filter","item","count"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAMC,gBAAgB,SAAhBA,aAAgB,WAAY;AAChC,MAAMC,OAAO,IAAIH,KAAJ,CAAU,OAAV,EAAmB,MAAnB,CAAb;AACAG,OAAKC,MAAL,CAAYC,QAAZ;AACA,MAAMC,OAAOH,KAAKI,OAAL,CAAa,KAAb,EAAoB;AAAEC,iBAAa;AAAf,GAApB,CAAb;AACA,MAAMC,SAASH,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAf;AACA,MAAMC,SAASL,KAAKI,KAAL,CAAW,CAAX,CAAf;AAEA,SACET,mBAAmBQ,MAAnB,EACE;AADF,GAEGG,IAFH,CAEQ;AAAA,WAAOC,IAAIC,MAAJ,CAAW;AAAA,aAAQC,KAAKJ,MAAL,KAAgBA,MAAxB;AAAA,KAAX,CAAP;AAAA,GAFR,EAGE;AAHF,GAIGC,IAJH,CAIQ;AAAA,WAAQC,IAAI,CAAJ,IAASA,IAAI,CAAJ,EAAOG,KAAhB,GAAwB,CAAhC;AAAA,GAJR,CADF;AAOD,CAdD;AAgBA;;;;;;;;;;AAQA,eAAed,aAAf","sourcesContent":["import JSSHA from 'jssha/src/sha1';\nimport pwnedPasswordRange from './pwnedPasswordRange';\n\n/**\n * Fetches the number of times the the given password has been exposed in a\n * breach (0 indicating no exposure). The password is given in plain text, but\n * only the first 5 characters of its SHA-1 hash will be submitted to the API.\n *\n * @param {string} password a password in plain text\n * @returns {Promise} a Promise which resolves to the number of times the\n * password has been exposed in a breach, or rejects with an Error\n * @example\n * pwnedPassword('f00b4r')\n *   .then(numPwns => {\n *     // truthy check or numeric condition\n *     if (numPwns) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @see https://haveibeenpwned.com/API/v2#PwnedPasswords\n * @alias module:pwnedPassword\n */\nconst pwnedPassword = password => {\n  const sha1 = new JSSHA('SHA-1', 'TEXT');\n  sha1.update(password);\n  const hash = sha1.getHash('HEX', { outputUpper: true });\n  const prefix = hash.slice(0, 5);\n  const suffix = hash.slice(5);\n\n  return (\n    pwnedPasswordRange(prefix)\n      // filter to matching suffix\n      .then(arr => arr.filter(item => item.suffix === suffix))\n      // return count if match, 0 if not\n      .then(arr => (arr[0] ? arr[0].count : 0))\n  );\n};\n\n/**\n * A module for securely determining how many times a password has been exposed\n * in a breach.\n *\n * @module pwnedPassword\n * @example\n * import { pwnedPassword } from 'hibp';\n */\nexport default pwnedPassword;\n"],"file":"pwnedPassword.js"}
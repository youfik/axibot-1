{"version":3,"sources":["../src/breaches.js"],"names":["breaches","options","endpoint","params","domain","push","encodeURIComponent","join"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,IAAMA,WAAW,SAAXA,QAAW,CAACC,OAAD,EAAkB;AAAA,MAAjBA,OAAiB;AAAjBA,WAAiB,GAAP,EAAO;AAAA;;AACjC,MAAMC,WAAW,YAAjB;AACA,MAAMC,SAAS,EAAf;;AACA,MAAIF,QAAQG,MAAZ,EAAoB;AAClBD,WAAOE,IAAP,aAAsBC,mBAAmBL,QAAQG,MAA3B,CAAtB;AACD;;AACD,SAAO,gCAAgBF,QAAhB,GAA2BC,OAAOI,IAAP,CAAY,GAAZ,CAA3B,CAAP;AACD,CAPD;AASA;;;;;;;;;eAOeP,Q","sourcesContent":["import fetchFromApi from './internal/haveibeenpwned/fetchFromApi';\n\n/**\n * Fetches all breach events in the system.\n *\n * @param {Object} [options] a configuration object\n * @param {string} [options.domain] a domain by which to filter the results\n * (default: all domains)\n * @returns {Promise} a Promise which resolves to an array of breach objects\n * (an empty array if no breaches were found), or rejects with an Error\n * @example\n * breaches()\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @example\n * breaches({ domain: 'adobe.com' })\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @alias module:breaches\n */\nconst breaches = (options = {}) => {\n  const endpoint = '/breaches?';\n  const params = [];\n  if (options.domain) {\n    params.push(`domain=${encodeURIComponent(options.domain)}`);\n  }\n  return fetchFromApi(`${endpoint}${params.join('&')}`);\n};\n\n/**\n * A module for retrieving all breach events in the system.\n *\n * @module breaches\n * @example\n * import { breaches } from 'hibp';\n */\nexport default breaches;\n"],"file":"breaches.js"}
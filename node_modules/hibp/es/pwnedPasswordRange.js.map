{"version":3,"sources":["../src/pwnedPasswordRange.js"],"names":["fetchFromApi","pwnedPasswordRange","encodeURIComponent","prefix","then","data","split","results","map","suffix","row","count","parseInt"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,wCAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,SACzBD,yBAAuBE,mBAAmBC,MAAnB,CAAvB,EACE;AADF,GAEGC,IAFH,CAEQ;AAAA,WAAQC,KAAKC,KAAL,CAAW,IAAX,CAAR;AAAA,GAFR,EAGE;AAHF,GAIGF,IAJH,CAIQ;AAAA,WACJG,QAAQC,GAAR,CAAY;AAAA,aAAQ;AAClBC,gBAAQC,IAAIJ,KAAJ,CAAU,GAAV,EAAe,CAAf,CADU;AAElBK,eAAOC,SAASF,IAAIJ,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAT,EAA4B,EAA5B;AAFW,OAAR;AAAA,KAAZ,CADI;AAAA,GAJR,CADyB;AAAA,CAA3B;AAYA;;;;;;;;;;AAQA,eAAeL,kBAAf","sourcesContent":["import fetchFromApi from './internal/pwnedpasswords/fetchFromApi';\n\n/**\n * Fetches the SHA-1 hash suffixes for the given 5-character SHA-1 hash prefix.\n *\n * When a password hash with the same first 5 characters is found in the Pwned\n * Passwords repository, the API will respond with an HTTP 200 and include the\n * suffix of every hash beginning with the specified prefix, followed by a count\n * of how many times it appears in the data set. This function parses the\n * response and returns a more structured format.\n *\n * @param {string} prefix the first 5 characters of a SHA-1 password hash (case\n * insensitive)\n * @returns {Promise} a Promise which resolves to an array of objects, each\n * containing the `suffix` that when matched with the prefix composes the\n * complete hash, and a `count` of how many times it appears in the breached\n * password data set, or rejects with an Error\n *\n * @example\n * pwnedPasswordRange('5BAA6')\n *   .then(results => {\n *     // results will have the following shape:\n *     // [\n *     //   { suffix: \"003D68EB55068C33ACE09247EE4C639306B\", count: 3 },\n *     //   { suffix: \"012C192B2F16F82EA0EB9EF18D9D539B0DD\", count: 1 },\n *     //   ...\n *     // ]\n *   })\n * @example\n * const suffix = '1E4C9B93F3F0682250B6CF8331B7EE68FD8';\n * pwnedPasswordRange('5BAA6')\n *   // filter to matching suffix\n *   .then(results => results.filter(row => row.suffix === suffix))\n *   // return count if match, 0 if not\n *   .then(results => (results[0] ? results[0].count : 0))\n *   .catch(err => {\n *     // ...\n *   });\n * @see https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange\n * @alias module:pwnedPasswordRange\n */\nconst pwnedPasswordRange = prefix =>\n  fetchFromApi(`/range/${encodeURIComponent(prefix)}`)\n    // create array from lines of text in response body\n    .then(data => data.split('\\n'))\n    // convert into array of objects containing suffix and count for each line\n    .then(results =>\n      results.map(row => ({\n        suffix: row.split(':')[0],\n        count: parseInt(row.split(':')[1], 10),\n      })),\n    );\n\n/**\n * A module for determining if a password's SHA-1 hash has been exposed in a\n * breach.\n *\n * @module pwnedPasswordRange\n * @example\n * import { pwnedPasswordRange } from 'hibp';\n */\nexport default pwnedPasswordRange;\n"],"file":"pwnedPasswordRange.js"}
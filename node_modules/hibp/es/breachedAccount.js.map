{"version":3,"sources":["../src/breachedAccount.js"],"names":["fetchFromApi","breachedAccount","account","options","endpoint","encodeURIComponent","params","domain","push","truncate","join"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,wCAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,OAAD,EAAUC,OAAV,EAA2B;AAAA,MAAjBA,OAAiB;AAAjBA,WAAiB,GAAP,EAAO;AAAA;;AACjD,MAAMC,iCAA+BC,mBAAmBH,OAAnB,CAA/B,MAAN;AACA,MAAMI,SAAS,EAAf;;AACA,MAAIH,QAAQI,MAAZ,EAAoB;AAClBD,WAAOE,IAAP,aAAsBH,mBAAmBF,QAAQI,MAA3B,CAAtB;AACD;;AACD,MAAIJ,QAAQM,QAAZ,EAAsB;AACpBH,WAAOE,IAAP,CAAY,uBAAZ;AACD;;AACD,SAAOR,kBAAgBI,QAAhB,GAA2BE,OAAOI,IAAP,CAAY,GAAZ,CAA3B,CAAP;AACD,CAVD;AAYA;;;;;;;;;AAOA,eAAeT,eAAf","sourcesContent":["import fetchFromApi from './internal/haveibeenpwned/fetchFromApi';\n\n/**\n * Fetches breach data for a specific account.\n *\n * @param {string} account a username or email address\n * @param {Object} [options] a configuration object\n * @param {string} [options.domain] a domain by which to filter the results\n * (default: all domains)\n * @param {boolean} [options.truncate] truncate the results to only include\n * the name of each breach (default: false)\n * @returns {Promise} a Promise which resolves to an array of breach objects\n * (or null if no breaches were found), or rejects with an Error\n * @example\n * breachedAccount('foo')\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @example\n * breachedAccount('bar', { truncate: true })\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @example\n * breachedAccount('baz', { domain: 'adobe.com', truncate: true })\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @alias module:breachedAccount\n */\nconst breachedAccount = (account, options = {}) => {\n  const endpoint = `/breachedaccount/${encodeURIComponent(account)}?`;\n  const params = [];\n  if (options.domain) {\n    params.push(`domain=${encodeURIComponent(options.domain)}`);\n  }\n  if (options.truncate) {\n    params.push('truncateResponse=true');\n  }\n  return fetchFromApi(`${endpoint}${params.join('&')}`);\n};\n\n/**\n * A module for retrieving breach data for a specific account.\n *\n * @module breachedAccount\n * @example\n * import { breachedAccount } from 'hibp';\n */\nexport default breachedAccount;\n"],"file":"breachedAccount.js"}
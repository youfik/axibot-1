"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const request_promise_1 = __importDefault(require("request-promise"));
const isUri = require('valid-url').isUri;
/**
 * The internal library of node-bitly
 * @module node-bitly.lib
 * @private
 */
const DEFAULT_OPTIONS = {
    apiUrl: 'api-ssl.bitly.com',
    apiVersion: 'v3',
    domain: 'bit.ly',
    format: 'json'
};
/**
 * Generates a valid URL for a GET request to the Bit.ly API
 * @param {object} UrlParameters An object of paramters to pass to generate a bit.ly url
 * @param {string} accessToken Your bit.ly access token
 * @param {string} method The method to call
 * @param {object} data a data object specifying bit.ly keys for your method
 * @param {object} config A custom config object to overide values
 * @private
 *
 * @example
 * ```js
 * generateUrl({method: 'shorten', accessKey: 'myaccessKey', data: { longUrl: 'https://github.com/tanepiper/node-bitly' } });
 * ```
 */
function generateUrl(accessToken, method, data = {}, config = {}) {
    const newQuery = Object.assign({
        access_token: accessToken,
        domain: config.domain || DEFAULT_OPTIONS.domain,
        format: config.format || DEFAULT_OPTIONS.format
    });
    Object.keys(data || []).forEach((key) => (newQuery[key] = data[key]));
    return url_1.parse(url_1.format({
        protocol: 'https',
        hostname: config.apiUrl || DEFAULT_OPTIONS.apiUrl,
        pathname: `/${config.apiVersion || DEFAULT_OPTIONS.apiVersion}/${method}`,
        query: newQuery
    }));
}
exports.generateUrl = generateUrl;
/**
 * Method called to generate a url and call the request
 * @param {object} options The options object
 * @param {string} options.accessToken The request accessToken
 * @param {string} options.method The method to be called on Bitly
 * @param {object} options.data A data object with key=>value pairs mapped to request parameters
 * @param {config} options.config A object that overrides the default values for a request
 * @returns {object} The request result object
 */
function doRequest(accessToken, method, data, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const uri = generateUrl(accessToken, method, data, config);
        try {
            const req = yield request_promise_1.default({
                uri
            });
            return JSON.parse(req);
        }
        catch (error) {
            throw error;
        }
    });
}
exports.doRequest = doRequest;
/**
 * Function to check through an array of items to check for short urls or hashes
 * If only passed one item, put in array for url checking
 * @param  {Array<string>} unsortedItems The array of items to be checked
 * @param  {object} query The query object
 * @return {object}
 */
function sortUrlsAndHash(unsortedItems, result = { shortUrl: [], hash: [] }) {
    result.shortUrl = result.shortUrl || [];
    result.hash = result.hash || [];
    (Array.isArray(unsortedItems) ? unsortedItems : [unsortedItems]).map(item => (isUri(item) ? result.shortUrl.push(item) : typeof item === 'string' && result.hash.push(item)));
    return result;
}
exports.sortUrlsAndHash = sortUrlsAndHash;
//# sourceMappingURL=lib.js.map